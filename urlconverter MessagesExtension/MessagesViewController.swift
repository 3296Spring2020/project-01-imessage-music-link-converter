//
//  MessagesViewController.swift
//  urlconverter MessagesExtension
//
//  Created by Alex St.Clair on 2/3/20.
//  Copyright Â© 2020 Alex St.Clair. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    //global variables
    @IBOutlet weak var textBox: UITextField!    //the text box in the UI
    @IBOutlet weak var enterButton: UIButton!   //the enter button in the UI
    var origLink = "";
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style
        // Use this method to finalize any behaviors associated with the change in presentation style.
        
        /*  Now that we are in expanded view,
         we want to reset the cursor so the
         keyboard stays open */
        textBox.sendActions(for: .touchUpInside);
    }
    
    /**
     Event handler for a touch on the textBox
     */
    @IBAction func onTextBoxClick() {
        //we want to force the expanded view when the user clicks the box
        //this is so that it is not obstructed by the keyboard
        if(presentationStyle == .compact){
            requestPresentationStyle(.expanded);
        }
    }
    
    /**
     Event handler for the Enter button
     - Parameter sender: the button being attached
     */
    @IBAction func onClick(_ sender: UIButton) {
        if(!(textBox.text?.elementsEqual("Paste link here"))!){
            origLink = textBox.text!;
            //origLink now contains the link that the user entered
            print(origLink);
        }
        else{
            print("No link has been entered.");
        }
    }
}
